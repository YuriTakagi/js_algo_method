/*

変数や関数、クラスなどの命名をする際は、形式だけでなく、内容の伝わりやすさも重要です。

次の擬似コードを例に考えます。

ただし、ここでの sqrt() 関数は引数の平方根  
​
  を計算するものとします。

def float: get_answer(float: x1, float: y1, float: x2, float: y2)
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))

float[]: x_coord = [3, 2, 6]
float[]: y_coord = [4, 5, 3]
float: result = 0.0
for (初期値: i = 0, 条件: i < 3, 更新: i += 1)
    for (初期値: j = i + 1, 条件: j < 3, 更新: j += 1)
        result += get_answer(x_coord[i], y_coord[i], x_coord[j], y_coord[j])
    endfor
endfor
print(result)
このコードの関数 get_answer や変数 result の命名には、次のような問題点があります。

表している情報が少なく、担っている役割が理解しづらい。

get は多義的で、曖昧である。上のコードでは「計算結果を得る」という意味だが、「結果を他の場所から取ってくる」という意味にもとれる。

書き捨てのコードなどであれば、これでも問題ないかもしれません。しかし、大規模なコードなど、今後何回も読まれるコードであれば、重大な問題になりえます。

オブジェクトの命名の際は、次のことに注意するとよいでしょう。

役割がわかりやすい、具体的な言葉を用いる。

get のような多義的な言葉を避ける。「計算する」という意味であれば calc を、「取ってくる」という意味であれば fetch を用いるとよい。

今回のコードであれば、次のようにするとわかりやすい命名になります。

get_answer を calc_points_dist とする。

関数の役割が「座標平面上の 2 点間の距離を求める」ことであるとわかりやすくなった。
result を dist_sum とする。

変数が保持するものが「2 点間の距離の総和」であるとわかりやすくなった。


次の処理をする関数を作成したいとします。

値のリストを受け取って、何種類の値が現れるかを求める。
伝わりやすさの観点から、どのような関数名にするのがよいでしょうか。最も適切なものを選択肢から 1 つ選んでください。

<選択肢>

1.　my_function

2.　get_types

3.　calc_sorts

4.　count_unique_values

(2)
大規模なコードの変数や関数の命名をする際の態度として最も適切でないものを、選択肢から 1 つ選んでください。

<選択肢>

1.　わかりやすい命名を試みたところあまりに長い名前になったので、適度な長さにした。

2.　長い変数名は書きにくいので、n や x などの 1 文字変数を多用した。

3.　2, 3 行程度にしか影響の及ばない一時的な変数を、tmp と命名した。

4.　分野の慣例上 set という関数名がよく用いられる処理だったので、そのように命名した。

*/

4;
2;
